---
- name: Subscribe to pipeline operator
  community.kubernetes.k8s:
    state: present
    definition: "{{ lookup('file', 'files/install/pipeline_subscription.yml' ) | from_yaml_all }}"
  # shell: "{{ orchestrator_tool }} apply --request-timeout=90s -R -f {{ item }}"
    kubeconfig: "{{ kubeconfig }}"


- name: Wait for operator to start.
  shell: "{{ orchestrator_tool }} wait --namespace={{ item.namespace }} --for=condition=Ready pods --selector \"{{ item.selector }}\" --timeout=30s"
  environment:
    KUBECONFIG: "{{ kubeconfig }}"
  retries: 5
  delay: 30
  register: result
  until: result.rc == 0
  loop:
    - { namespace: 'openshift-operators', selector: 'name=openshift-pipelines-operator'}

- name: Wait for ClusterTasks to be available
  shell: "{{ orchestrator_tool }} describe ClusterTask tkn"
  environment:
    KUBECONFIG: "{{ kubeconfig }}"
  retries: 5
  delay: 30
  register: result
  until: result.rc == 0

- name: Create API token
  uri:
    url: "{{ central_url }}/v1/apitokens/generate"
    body: '{"name":"pipelines-ci-token","role":null,"roles":["Continuous Integration"]}'
    method: POST
    user: admin
    password: "{{ admin_password }}"
    body_format: json
    force_basic_auth: true
    validate_certs: no
  register: ci_token_json

- name: Get API token from response
  set_fact:
    rox_api_token:  "{{ ci_token_json.json.token }}"

- name: Create namespace
  shell: '{{ orchestrator_tool }}
    create ns {{ item }} --dry-run=client  -o yaml | \
    {{ orchestrator_tool }} \
    apply -f -'
  environment:
    KUBECONFIG: "{{ kubeconfig }}"
  loop:
  - pipeline-demo

- name: Create secrets for pipelines
  community.kubernetes.k8s:
    state: present
    definition: "{{ lookup('template', 'templates/config/1-rox-secrets.yml.j2' ) | from_yaml_all }}"
  # shell: "{{ orchestrator_tool }} apply --request-timeout=90s -R -f {{ item }}"
    kubeconfig: "{{ kubeconfig }}"

- name: Get pipeline yamls
  find:
    paths:
      - roles/pipelines/files/config
    recurse: yes
    patterns: '*.yml'
  register: pipeline_yamls

- name: Create tasks & pipeline
  community.kubernetes.k8s:
    state: present
    definition: "{{ lookup('file', item.path ) | from_yaml_all }}"
  # shell: "{{ orchestrator_tool }} apply --request-timeout=90s -R -f {{ item }}"
    kubeconfig: "{{ kubeconfig }}"
  loop: "{{ pipeline_yamls.files }}"

- name: Wait for Rox ClusterTasks to be available
  shell: "{{ orchestrator_tool }} describe ClusterTask {{ item }}"
  environment:
    KUBECONFIG: "{{ kubeconfig }}"
  retries: 5
  delay: 30
  register: result
  until: result.rc == 0
  loop:
    - "rox-image-scan"
    - "rox-image-check"

- name: Run pipeline against sample images
  community.kubernetes.k8s:
    state: present
    definition: "{{ lookup('template', 'templates/run/4-rox-pipelinerun.yml.j2' ) | from_yaml_all }}"
    kubeconfig: "{{ kubeconfig }}"
  loop:
    - name: "sample-image-old"
      image: "quay.io/rhacs-demo/sample-image:getting-started-old"
    - name: "sample-image-new"
      image: "quay.io/rhacs-demo/sample-image:getting-started"

- name: Run pipeline against deployment yamls
  community.kubernetes.k8s:
    state: present
    definition: "{{ lookup('template', 'templates/run/4-rox-deploy-pipelinerun.yml.j2' ) | from_yaml_all }}"
    kubeconfig: "{{ kubeconfig }}"
  loop: "{{ deployment_yamls }}"

- name: Run pipeline to generate netpol
  community.kubernetes.k8s:
    state: present
    definition: "{{ lookup('template', 'templates/run/4-rox-netpol-pipelinerun.yml.j2' ) | from_yaml_all }}"
    kubeconfig: "{{ kubeconfig }}"
  loop: "{{ net_yamls }}"
  # defined in roles/pipelines/vars/main.yml
